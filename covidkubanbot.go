package main

import (
	"fmt"
	"log"
	"time"
	"strings"
	"net/http"
	"gopkg.in/telegram-bot-api.v4"
	"github.com/globalsign/mgo"
	"github.com/globalsign/mgo/bson"
)

type subscriber struct {
	Id          bson.ObjectId   `_id`
    Chatid      int64
    User        *tgbotapi.User
    Step		int				//0 - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º, 1 - —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
    Regdate     time.Time
}

type rubric struct {
	Id			bson.ObjectId	`_id`
	Title		string
	Description	string
	Categories	[]category
}

type category struct {
	Id		bson.ObjectId
	Title	string
	Qas		[]qa
}

type qa struct {
	Id			bson.ObjectId
	Question	string
	Answer		string
}

type index struct {
	I	int
}
type mix []interface{}

func sendError(bot *tgbotapi.BotAPI, chatId int64, err error) {
	_, err = bot.Send(tgbotapi.NewMessage(chatId, err.Error()))
	if err != nil {
		log.Println(err)
	}
}

func createMainMenu(data []rubric) tgbotapi.ReplyKeyboardMarkup {
	keyboard := [][]tgbotapi.KeyboardButton{}
	row := []tgbotapi.KeyboardButton{}
	for i, v := range data {
		button := tgbotapi.NewKeyboardButton(v.Title)
		row = append(row, button)				//–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫—É
		if i % 2 == 1 {
			keyboard = append(keyboard, row)	//–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			row = []tgbotapi.KeyboardButton{}	//–û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤-—Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
		}
	}
	//–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤ –º–∞—Å—Å–∏–≤–µ-—Å—Ç—Ä–æ–∫–µ –∫–Ω–æ–ø–∫–∏
	if row != nil {
		keyboard = append(keyboard, row)
	}
	
	markup := tgbotapi.ReplyKeyboardMarkup{
		ResizeKeyboard: true,
		Keyboard: keyboard,
	}
	return markup
}

func getCategories(text string, data []rubric) []category {
	for _, v := range data {
		if v.Title == text {
			return v.Categories
		}
	}	
	return nil
}

//–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏—â–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
func getCategory(text string, data []rubric) category {
	for _, v := range data {
		for _, c := range v.Categories {
			if c.Title == text {
				return c
			}
		}
	}	
	return category{}
}

func getQuestions(categories []category) (string, []string, []string) {
	questions := ""
	n := 0
	qaIds := []string{} 	//–ú–∞—Å—Å–∏–≤ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤
	titles := []string{}	//–ú–∞—Å—Å–∏–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–º–µ–Ω—é –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è)
	for _, category := range categories {
		if category.Title != "" {
			titles = append(titles, category.Title)
		}
		for _, qa := range category.Qas {
			n++
			questions += fmt.Sprint(n)+". "+qa.Question+"\n\n"
			qaIds = append(qaIds, qa.Id.Hex())
		}
	}	
	return questions, qaIds, titles
}

func getQuestionsByCategory(qas []qa) (string, []string) {
	questions := ""
	qaIds := []string{} 	//–ú–∞—Å—Å–∏–≤ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤
	for i, qa := range qas {
		questions += fmt.Sprint(i+1)+". "+qa.Question+"\n\n"
		qaIds = append(qaIds, qa.Id.Hex())
	}
	return questions, qaIds
}

//–°–æ–∑–¥–∞–µ–º —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func createNumericKeyboard(qaIds []string) tgbotapi.InlineKeyboardMarkup {
	keyboard := [][]tgbotapi.InlineKeyboardButton{}
	row := []tgbotapi.InlineKeyboardButton{}
	for i, qaId := range qaIds {
		button := tgbotapi.NewInlineKeyboardButtonData(fmt.Sprint(i+1), qaId)
		row = append(row, button)					//–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫—É
		if i % 6 == 5 {
			keyboard = append(keyboard, row)		//–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			row = []tgbotapi.InlineKeyboardButton{}	//–û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
		}
	}
	//–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤ –º–∞—Å—Å–∏–≤–µ-—Å—Ç—Ä–æ–∫–µ –∫–Ω–æ–ø–∫–∏
	if row != nil {
		keyboard = append(keyboard, row)
	}
	return tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: keyboard,
	}
}

//–°–æ–∑–¥–∞–µ–º —Å–∞–±-–º–µ–Ω—é
func createSubMenu(titles []string) tgbotapi.ReplyKeyboardMarkup {
	keyboard := [][]tgbotapi.KeyboardButton{}
	row := []tgbotapi.KeyboardButton{}
	for i, title := range titles {
		button := tgbotapi.NewKeyboardButton(title)
		row = append(row, button)				//–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å—Ç—Ä–æ–∫—É
		if i % 2 == 1 {
			keyboard = append(keyboard, row)	//–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			row = []tgbotapi.KeyboardButton{}	//–û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤-—Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
		}
	}
	//–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤ –º–∞—Å—Å–∏–≤–µ-—Å—Ç—Ä–æ–∫–µ –∫–Ω–æ–ø–∫–∏
	if row != nil {
		keyboard = append(keyboard, row)
	}
	//–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
	button := tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥")
	row = tgbotapi.NewKeyboardButtonRow(button)
	keyboard = append(keyboard, row)
	
	markup := tgbotapi.ReplyKeyboardMarkup{
		ResizeKeyboard: true,
		Keyboard: keyboard,
	}
	return markup
	
}

//–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" (–ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
func createBackButton() tgbotapi.ReplyKeyboardMarkup {
	button := tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥")
	row := tgbotapi.NewKeyboardButtonRow(button)
	return tgbotapi.NewReplyKeyboard(row)
}

func createYesNo(newQuestionId string) tgbotapi.InlineKeyboardMarkup {
	buttonYes := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞", "yes_"+newQuestionId)
	buttonNo := tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç", "no_")
	row := tgbotapi.NewInlineKeyboardRow(buttonYes, buttonNo)
	return tgbotapi.NewInlineKeyboardMarkup(row)
}



func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)	//–î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
	
	bot, err := tgbotapi.NewBotAPI("--hidden API KEY--")
	if err != nil {
		log.Panic(err)
	}
	log.Printf("%s —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!", bot.Self.UserName)
	
	
    updates := bot.ListenForWebhook("/"+bot.Token)
    go http.ListenAndServeTLS("0.0.0.0:88", "webhook_cert.pem", "webhook_pkey.pem", nil)
	
	/*bot.RemoveWebhook()
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, err := bot.GetUpdatesChan(u)*/
	
    //–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º mongodb –∫ –±–æ—Ç—É
	session, err := mgo.Dial("localhost")
	if err != nil {
		log.Fatal(err)
	}
	defer session.Close()
	cu := session.DB("local").C("covidkuban_users")
	cc := session.DB("local").C("covidkuban_config")
	cq := session.DB("local").C("covidkuban_newquest")

	for update := range updates {
		if update.Message != nil {
			upd := *update.Message
			
			//–ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ—á–µ–Ω—å —Ä–∞–∑–¥–µ–ª–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
			data := []rubric{}
			err := cc.Find(nil).All(&data)
			if err != nil {
				sendError(bot, upd.Chat.ID, err)
			}
			
			//–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
			user := subscriber{}
    		//–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chatid
			err = cu.Find(bson.M{"chatid": upd.Chat.ID}).One(&user)
			//–ï—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –ë–î
			if err != nil {
				err = cu.Insert(bson.M{"_id": bson.NewObjectId(), "chatid": upd.Chat.ID, "user": upd.From, "regdate": time.Now()})
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
			}
			
			if user.Step == 1 {
				newId := bson.NewObjectId()
				cq.Insert(bson.M{"_id": newId, "question": upd.Text, "chatid": upd.Chat.ID, "from": user.User.FirstName+" "+user.User.LastName, "date": time.Now()})
				msg := tgbotapi.NewMessage(upd.Chat.ID, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é?\n\n<b>–û—Ç –∫–æ–≥–æ:</b> "+user.User.FirstName+" "+user.User.LastName+"\n<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> "+time.Now().Format("02.01.2006 15:04")+"\n<b>–í–æ–ø—Ä–æ—Å:</b> \""+upd.Text+"\"")
				msg.ParseMode = "HTML"
				msg.ReplyMarkup = createYesNo(newId.Hex())
				_, err = bot.Send(msg)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
				continue
			}

			
			if upd.Text == "/start" {
   				//–°–±—Ä–∞—Å—ã–≤–∞–µ–º step –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				cu.Update(bson.M{"chatid": upd.Chat.ID}, bson.M{"$set": bson.M{"step": 0}})
				
				msg := tgbotapi.NewMessage(upd.Chat.ID, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞—Å–∞—é—â–∏–µ—Å—è —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–º –∫—Ä–∞–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")
				msg.ReplyMarkup = createMainMenu(data)
				_, err = bot.Send(msg)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
				
			//–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
			} else if categories := getCategories(upd.Text, data); categories != nil {
				questions, qaIds, titles := getQuestions(categories)
				if questions == "" {	//–¢–∞–∫–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å, –µ—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
					msg := tgbotapi.NewMessage(upd.Chat.ID, "‚ùï –í–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ä—É–±—Ä–∏–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /ask –∏ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å.")
					_, err = bot.Send(msg)
					if err != nil {
						sendError(bot, upd.Chat.ID, err)
					}
					continue
				}
				
				msg := tgbotapi.NewMessage(upd.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
				//–î–æ–±–∞–≤–ª—è–µ–º —Å–∞–±-–º–µ–Ω—é (–µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä—É–±—Ä–∏–∫ –∏–º–µ—é—Ç—Å—è)
				if len(titles) != 0 {
					msg.ReplyMarkup = createSubMenu(titles)
				}
				_, err := bot.Send(msg)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}

				msg = tgbotapi.NewMessage(upd.Chat.ID, questions)
				msg.ReplyMarkup = createNumericKeyboard(qaIds)
				_, err = bot.Send(msg)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
			
			//–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –º–µ–Ω—é –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
			} else if cat := getCategory(upd.Text, data); cat.Id != "" {
				questions, qaIds := getQuestionsByCategory(cat.Qas)
				
				msg := tgbotapi.NewMessage(upd.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
				msg = tgbotapi.NewMessage(upd.Chat.ID, questions)
				msg.ReplyMarkup = createNumericKeyboard(qaIds)
				_, err = bot.Send(msg)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
							
			//–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –º–µ–Ω—é –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
			} else if upd.Text == "üîô –ù–∞–∑–∞–¥" {
				msg := tgbotapi.NewMessage(upd.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.\n\n–ï—Å–ª–∏ –í—ã –Ω–µ –Ω–∞—à–ª–∏ –í–∞—à –≤–æ–ø—Ä–æ—Å, –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /ask –∏ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å.")
				msg.ReplyMarkup = createMainMenu(data)
				_, err = bot.Send(msg)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
				
			//–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥—É /ask
			} else if upd.Text == "/ask" {
				err := cu.Update(bson.M{"chatid": upd.Chat.ID}, bson.M{"$set": bson.M{"step": 1}})
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
					continue
				}
				msg := tgbotapi.NewMessage(upd.Chat.ID, "–ü–æ–∂–∞–ª—É—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å")
				msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
				_, err = bot.Send(msg)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
				
			//–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
			} else {
				/*
					db.getCollection('covidkuban_config').aggregate([
						{ "$unwind": "$categories" },
						{ "$unwind": "$categories.qas" },
						{ "$match": { "$or": [
							{ "categories.qas.answer": /–∫—É—Ä–æ—Ä—Ç–Ω–æ–π/ },
							{ "categories.qas.question": /–∫—É—Ä–æ—Ä—Ç–Ω–æ–π/ }
						] } },
						{ "$project": { "id": "$categories.qas.id", "question": "$categories.qas.question" } }
					])
				*/
				qas := []qa{}
				err := cc.Pipe([]bson.M{
					{"$unwind": "$categories"},
					{"$unwind": "$categories.qas"},
					{"$match": bson.M{"$or": []bson.M{
						{"categories.qas.answer": bson.M{"$regex": bson.RegEx{Pattern: upd.Text, Options: "i"}}},
						{"categories.qas.question": bson.M{"$regex": bson.RegEx{Pattern: upd.Text, Options: "i"}}},
					}}},
					{"$project": bson.M{"id": "$categories.qas.id", "question": "$categories.qas.question"}},
				}).All(&qas)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
				
				if len(qas) == 0 {
					keyword := "‚ùï –ü–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"
					if strings.Contains(upd.Text, " ") {
						keyword = "‚ùï –ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
					}
					msg := tgbotapi.NewMessage(upd.Chat.ID, keyword+" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.\n\n–ï—Å–ª–∏ –í—ã –Ω–µ –Ω–∞—à–ª–∏ –í–∞—à –≤–æ–ø—Ä–æ—Å, –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /ask –∏ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å.")
					_, err = bot.Send(msg)
					if err != nil {
						sendError(bot, upd.Chat.ID, err)
					}
					continue
				}
				
				questions, qaIds := getQuestionsByCategory(qas)
				
				msg := tgbotapi.NewMessage(upd.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
				msg.ReplyMarkup = createBackButton()	//–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
				_, err = bot.Send(msg)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}

				msg = tgbotapi.NewMessage(upd.Chat.ID, questions)
				msg.ReplyMarkup = createNumericKeyboard(qaIds)
				_, err = bot.Send(msg)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
			}
			
		} else if update.CallbackQuery != nil {
			upd := *update.CallbackQuery.Message
			callback := update.CallbackQuery.Data
			if !bson.IsObjectIdHex(callback) {
				//yes_5e88c5d2c3875d244c92823e –∏–ª–∏ no_
				callbackData := strings.Split(callback, "_")
				//–ò—Å–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞–∂–∞—Ç–∏–µ–º "—É—Å—Ç–∞—Ä–µ–≤—à–µ–π" –∫–Ω–æ–ø–∫–∏
				if len(callbackData) != 2 {
					continue
				}
				ps := "\n\n<i>–í–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</i>"
				closeText := "–ß—Ç–æ–±—ã –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /ask –∏ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å."
				if callbackData[0] == "yes" {
					bot.AnswerCallbackQuery(tgbotapi.NewCallback(update.CallbackQuery.ID, "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"))
					ps = "\n\n<i>–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</i>"
					closeText = "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å!"
					if bson.IsObjectIdHex(callbackData[1]) {
						cq.UpdateId(bson.ObjectIdHex(callbackData[1]), bson.M{"$set": bson.M{"sent": true}})
					}
					/*msg := tgbotapi.NewMessage(476580, "–ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"+upd.Text[70:])
					_, err = bot.Send(msg)
					if err != nil {
						sendError(bot, upd.Chat.ID, err)
					}*/
				} else if callbackData[0] == "no" {
					bot.AnswerCallbackQuery(tgbotapi.NewCallback(update.CallbackQuery.ID, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."))
				} else {
					bot.AnswerCallbackQuery(tgbotapi.NewCallback(update.CallbackQuery.ID, "–û—à–∏–±–∫–∞"))
				}
				//–°–±—Ä–∞—Å—ã–≤–∞–µ–º step –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				err := cu.Update(bson.M{"chatid": upd.Chat.ID}, bson.M{"$set": bson.M{"step": 0}})
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
				
				//–ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				editmsg := tgbotapi.NewEditMessageText(upd.Chat.ID, upd.MessageID, upd.Text[70:]+ps)
				editmsg.ParseMode = "HTML"
				_, err = bot.Send(editmsg)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
				
				//–ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ—á–µ–Ω—å —Ä–∞–∑–¥–µ–ª–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
				data := []rubric{}
				err = cc.Find(nil).Select(bson.M{"title": 1}).All(&data)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
				
				msg := tgbotapi.NewMessage(upd.Chat.ID, closeText)
				msg.ReplyMarkup = createMainMenu(data)
				_, err = bot.Send(msg)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
				
				continue
			}
			bot.AnswerCallbackQuery(tgbotapi.NewCallback(update.CallbackQuery.ID, ""))

			/*
				db.getCollection('covidkuban_config').aggregate([
					{ "$unwind": "$categories" },
					{ "$unwind": "$categories.qas" },
					{ "$match": { "categories.qas.id": ObjectId("5e85cf7d020c6189c1dd48aa") } },
					{ "$project": { "question": "$categories.qas.question", "answer": "$categories.qas.answer" } }
				])
			*/
			qa := qa{}
			err := cc.Pipe([]bson.M{
				{"$unwind": "$categories"},
				{"$unwind": "$categories.qas"},
				{"$match": bson.M{"categories.qas.id": bson.ObjectIdHex(callback)}},
				{"$project": bson.M{"question": "$categories.qas.question", "answer": "$categories.qas.answer"}},
			}).One(&qa)
			if err != nil {
				sendError(bot, upd.Chat.ID, err)
				continue
			}
			
			//–ò—â–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–∞—Å—Å–∏–≤–µ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
			/*db.getCollection('covidkuban_config').aggregate([
				{"$match": {"categories.qas.id": ObjectId("5e8639cabecfb896d7832280")}},
				{"$unwind": "$categories"},
				{
					"$project": {
						"i": { "$indexOfArray": [ "$categories.qas.id", ObjectId("5e8639cabecfb896d7832280") ] }
					}
				},
				{"$match": {"i": {"$gt":-1}}}
			])*/
			qaIndex := index{}
			cc.Pipe([]bson.M{
				{"$unwind": "$categories"},
				{"$project": bson.M{
					"i": bson.M{"$indexOfArray": mix{"$categories.qas.id", bson.ObjectIdHex(callback)}},
				}},
				{"$match": bson.M{"i": bson.M{"$gt":-1}}},
			}).One(&qaIndex)
			//–î–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤)
			cc.Update(bson.M{"categories.qas.id": bson.ObjectIdHex(callback)}, bson.M{"$inc": bson.M{"categories.$.qas."+fmt.Sprint(qaIndex.I)+".requests": 1}})
			
			//answerLength := len([]rune(qa.Answer))
			//numOfMsg := answerLength/4096+1
			answerArray := strings.Split(qa.Answer, "<cut>")	//–†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
			for _, v := range answerArray {
				msg := tgbotapi.NewMessage(upd.Chat.ID, "<b>"+qa.Question+"</b>\n\n"+v)
				msg.ParseMode = "HTML"
			
				_, err = bot.Send(msg)
				if err != nil {
					sendError(bot, upd.Chat.ID, err)
				}
			}
		}
	}
}
